（1）fopen（）函数：打开文件
包含头文件：#include<stdio.h>

格式：FILE * fopen(const char * path,const char * mode);

参数：
 path：需要打开的文件路径
  mode：文件打开方式
r  以只读方式打开文件，该文件必须存在。
r+  以可读写方式打开文件，该文件必须存在。
rb+  读写打开一个二进制文件，允许读数据。
rt+  读写打开一个文本文件，允许读和写。
w  打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失。若文件不存在则建立该文件。
w+  打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。
a  以附加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留。（EOF符保留）
a+  以附加方式打开可读写的文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾后，即文件原先的内容会被保留。 （原来的EOF符不保留）
wb  只写打开或新建一个二进制文件；只允许写数据。
wb+  读写打开或建立一个二进制文件，允许读和写。
wt+  读写打开或着建立一个文本文件；允许读写。
at+  读写打开一个文本文件，允许读或在文本末追加数据。
ab+  读写打开一个二进制文件，允许读或在文件末追加数据。
现在对上面的文件打开方式做个总结：
文件使用方式由r,w,a,t,b，+六个字符拼成，各字符的含义是：
    r（read）： 读
    w（write）： 写
    a（append）： 追加
    t（text）： 文本文件，可省略不写
    b（banary）： 二进制文件
    +: 读和写
返回值
    如果文件顺利打开，返回指向该流的文件指针。如果文件打开失败则返回NULL，并把错误代码存在errno中。
说明
    一般而言，打开文件后会作一些文件读取或写入的动作，若打开文件失败，接下来的读写动作也无法顺利进行，所以一般在fopen()后作错误判断及处理。
（2）fread（）函数和fwrite（）函数：（可以用来实现对数据块的操作）
1.一般调用形式

  fread(buffer,size,count,fp);

  fwrite(buffer,size,count,fp);

2.说明

  （1）buffer：是一个指针，对fread来说，它是读入数据的存放地址。对fwrite来说，是要输出数据的地址。

  （2）size：要读写的字节数；

  （3）count:要进行读写多少个size字节的数据项；

  （4）fp:文件型指针。

C语言还提供了用于整块数据的读写函数。 可用来读写一组数据，如一个数组元素，一个结构变量的值等。读数据块函数调用的一般形式为： fread(buffer,size,count,fp); 写数据块函数调用的一般形式为： fwrite(buffer,size,count,fp); 其中buffer是一个指针，在fread函数中，它表示存放输入数据的首地址。在fwrite函数中，它表示存放输出数据的首地址。 size 表示数据块的字节数。count 表示要读写的数据块块数。fp 表示文件指针。

例如：fread(fa,4,5,fp); 其意义是从fp所指的文件中，每次读4个字节(一个实数)送入实数组fa中，连续读5次，即读5个实数到fa中。

（3）fgetc（）和fputc（）：字符读写函数

fgetc函数(getc函数)
 (1)一般调用形式
        ch=fgetc(fp);
（2）作用
        从指定的文件读入一个字符，即从fp所指向的文件中读入一个字符赋给ch。
（3）返回值
        成功：返回值所得到的字符；
        失败：返回EOF(-1)。

fputc函数（）：

(1)一般调用形式
 fputc(ch,fp);
（2）作用
把一个字符写到磁盘文件上去，即将字符ch输出到fp所指向的文件中去。
（3）返回值
成功：返回值就是输出的字符；
失败：返回EOF(-1)。
说明：函数putchar()是在stdio.h中用预处理命令定义的宏，即：
#define putchar(c)     fputc(c,stdout)

4、fgets（）和fputs（）函数：读写字符串函数

（1）fgets（）：char *fgets（char *str, int num, FILE *fp）

参数说明：str： 保存从文件读取出来的字符串      

         fp： 待读文件的文件指针

         num： 表示从文件中读出的字符串不超过 n-1个字符。在读入的最后一个字符后加上串结束标志'\0'

 

（2）fputs（char * s，FILE * stream）；
5、fscanf（）和fprintf（）函数：格式化读写函数

（1）fprintf（）函数：输出格式化字符串到流或者是将格式化后的字符串写到输出流（文件）

原型：int fprintf（ FILE *stream, const char *format [, argument ]…）；

例子：fprintf（fp, "%s %s %d %f", str1,str2, a, b） ;

（2）fscanf（）函数：输出文件中的内容到某个变量中。

6、ftell（）函数：得到流式文件的当前读写位置，其返回值是当前读写位置偏离文件头部的字节数。

原型：long ftell（FILE *fp）

7、 fseek（）函数：把fp的文件读写位置指针移到指定的位置。


int fseek（FILE *fp,long offset,int origin）；
origin指的是“起始点”，它有三个常量的值，如下：
起始点对应的数字   代表的文件位置
SEEK_SET 0   文件开头
SEEK_CUR 1   文件当前位置
SEEK_END 2   文件末尾
8、 rewind（）函数：将文件指针重新指向一个流的开头
原型：int rewind（FILE *stream）；
例子：一般我们会通过下面的方法来获取文件中字符的个数：
    FILE *fs=fopen（"C:\1.txt","r"）；//创建文件流
    long length=0;//声明文件长度
    fseek（fs,0,SEEK_END）；//将文件内部指针放到文件最后面
    length=ftell（fs）；//读取文件指针的位置，得到文件字符的个数
    rewind（fs）；//将文件指针重置到文件最前面