C的设计原则是把函数作为程序的构成模块。main()函数称之为主函数，一个C程序总是从main()函数开始执行的。
一、main()函数的形式

在最新的 C99 标准中，只有以下两种定义方式是正确的：

int main( void )  /* 无参数形式 */
{
    ...
    return 0;
}
int main( int argc, char *argv[] ) /* 带参数形式 */
{
    ...
    return 0;
}
int指明了main()函数的返回类型，函数名后面的圆括号一般包含传递给函数的信息。void表示没有给函数传递参数。关于带参数的形式，我们等会讨论。

浏览老版本的C代码，将会发现程序常常以。

main()

这种形式开始。C90标准允许这种形式，但是C99标准不允许。因此即使你当前的编译器允许，也不要这么写。

你还可能看到过另一种形式。

void main()

有些编译器允许这种形式，但是还没有任何标准考虑接受它。C++ 之父 Bjarne Stroustrup 在他的主页上的 FAQ 中明确地表示：void main( ) 的定义从来就不存在于 C++ 或者 C 。所以，编译器不必接受这种形式，并且很多编译器也不允许这么写。

坚持使用标准的意义在于：当你把程序从一个编译器移到另一个编译器时，照样能正常运行。
二、main()函数的返回值

从前面我们知道main()函数的返回值类型是int型的，而程序最后的 return 0; 正与之遥相呼应，0就是main()函数的返回值。那么这个0返回到那里呢？返回给操作系统，表示程序正常退出。因为return语句通常写在程序的最后，不管返回什么值，只要到达这一步，说明程序已经运行完毕。而return的作用不仅在于返回一个值，还在于结束函数。

现在我们来做一个小试验（注意：本人的系统是Windows XP, 编译环境是TC）来观察main()函数的返回值。编写如下代码并编译运行：

//a.c
#include "stdio.h"
int main(void)
{
    printf("I love you.");
    return 0;
}
将这个文件保存为a.c，编译运行后会生成一个a.exe文件。现在打开命令提示符，在命令行里运行刚才编译好的可执行文件，然后输入   echo %ERRORLEVEL% ，回车，就可以看到程序返回 一个0 。如果把 return 0; 改为 return 99; ，那么很显然，再次执行上述步骤以后你可以看到程序返回99。要是你这样写 return 99.99; 那还是返回99，因为99.99被传给操作系统之前，被强制类型转换成整数类型了。

现在，我们把a.c改回原来的代码，然后再编写另一个程序b.c:

//b.c
#include "stdio.h"
int main(void)
{
    printf("
I’m too.");
    return 0;
}
编译运行后打开命令提示符，在命令行里输入a&&b 回车，这样你就可以看到《人鬼情未了》里面经典的爱情对白：

I love you.

I’m too.

&& 的含义是：如果 && 前面的程序正常退出，则继续执行 && 后面的程序，否则不执行。所以，要是把a.c里面的 return 0; 删除或者改为 return 99; ，那么你只能看到 I love you. 。也就是说，程序b.c就不执行了。现在，大家该明白 return 0; 的作用了吧。
三、main()函数的参数

C编译器允许main()函数没有参数，或者有两个参数（有些实现允许更多的参数，但这只是对标准的扩展）。这两个参数，一个是int类型，一个是字符串类型。第一个参数是命令行中的字符串数。按照惯例（但不是必须的），这个int参数被称为argc（argument count）。大家或许现在才明白这个形参为什么要取这么个奇怪的名字吧，呵呵！至于英文的意思，自己查字典吧。第二个参数是一个指向字符串的指针数组。命令行中的每个字符串被存储到内存中，并且分配一个指针指向它。按照惯例，这个指针数组被称为argv（argument value）。系统使用空格把各个字符串格开。一般情况下，把程序本身的名字赋值给argv[0]，接着，把最后的第一个字符串赋给argv[1]，等等。

现在我们来看一个例子：

//c.c
#include "stdio.h"
int main(int argc, char *argv[])
{
    int count;
    printf("The command line has %d arguments:
", argc - 1);
    for(count = 1; count < argc; count++)
        printf("%d: %s
", count, argv[count]);
    return 0;
}
编译运行，在命令行输入c I love you 回车，下面是从命令行运行该程序的结果：

The command line has 3 arguments:

1：I

2：love

3：you

从本例可以看出，程序从命令行中接受到4个字符串（包括程序名），并将它们存放在字符串数组中，其对应关系：

argv[0]  ------>    c(程序名)

argv[1]  ------>    I

argv[2]  ------>    love

argv[3]  ------>    you

至于argc的值，也即是参数的个数，程序在运行时会自动统计，不必我们操心。

这个例子中，每个字符串都时一个单词（字母），那既然是字符串，要把一句话当作参数赋给程序该怎么办？你可以在命令行里这样输入 c  "I love you."  "I’m too."。程序运行结果：

The command line has 2 arguments:

1：I love you.

2：I’m too.

其对应关系：

argv[0]  ------>    c(程序名)

argv[1]  ------>    I love you.

argv[2]  ------>    I’m too.

要注意的是，你在命令行的输入都将作为字符串形式存储于内存中。也就是说，如果你输入一个数字，那么要输出这个数字，你应该用%s格式而非%d或者其他。

再来看一个例子：

//d.c
#include "stdio.h"
int main(int argc, char *argv[])
{
    FILE *fp;
    fp = fopen(argv[1], "w");
    fputs("I love you.", fp);
    fclose(fp);
    return 0;
}
编译运行，打开命令行并输入d love.txt 回车。这样，打开d.c文件所在的目录，你会发现多了一个名为 love.txt 的文件，打开后里面的内容正是世界上说的最多的那句话。